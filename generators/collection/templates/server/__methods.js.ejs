/**
 * Defines remotely accessible methods pertinent to <%= collection.name %> collection
 */
import { Meteor } from '../common';

import { <%= collection.name %>, publishName } from '.';
import { PERMISSIONS } from './permissions';
<%_ if (generateAuditLog) { _%>
import { postAuditLog } from '../common/auditLogs';
<%_ } _%>

Meteor.methods({
    // built-in methods
    [`/${publishName}/insert`]: collectionInsert,
    [`/${publishName}/update`]: collectionUpdate,
    [`/${publishName}/remove`]: collectionRemove
    // application-specific methods here
});

function collectionInsert(doc) {
    PERMISSIONS.insert.call(this, this.userId, doc);
    const result = <%= collection.name %>.insert(doc);
    <%_ if (generateAuditLog) { _%>
    postAuditLog(this.userId, 'insert', { doc, result }, publishName);
    <%_ } _%>
    return result
}

function collectionUpdate(selector, modifier, options) {
    const doc = <%= collection.name %>.findOne(selector);
    if (!doc) return 0;
    PERMISSIONS.update.call(this, this.userId, doc, modifier && modifier.$set, modifier);
    const result = <%= collection.name %>.update(selector, modifier, options);
    <%_ if (generateAuditLog) { _%>
    if (result > 0) postAuditLog(this.userId, 'update', { doc, selector, modifier, result }, publishName);
    <%_ } _%>
    return result
}

function collectionRemove(selector) {
    const doc = <%= collection.name %>.findOne(selector);
    if (!doc) return 0;
    PERMISSIONS.remove.call(this, this.userId, doc);
    const result = <%= collection.name %>.remove(selector);
    <%_ if (generateAuditLog) { _%>
    if (result > 0) postAuditLog(this.userId, 'remove', { doc }, publishName);
    <%_ } _%>
    return result
}
